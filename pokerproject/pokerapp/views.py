from pokerapp.models import HandHistory, Seat, Action, Player, Street
from rest_framework import permissions, viewsets
from pokerapp.serializers import HandHistorySerializer, SeatSerializer, \
        ActionSerializer, PlayerSerializer, StreetSerializer
from django.views import View
from django.http import response
from django.urls import reverse


# Vanilla django endpoints
# Can be useful to compute model-extracted data, such as simple objects, statistics, templates (if used)

class PlayerHandsView(View):
    """Return, for a player, a list of the hand history urls.

    For this read-only API endpoint, plain old django is more efficient than playing with serializers.
    """

    def get(self, request, player_name):
        data = HandHistory.objects.all().filter(seats__player__name=player_name)
        list_data = [request.build_absolute_uri(reverse('handhistory-detail',
                                                        kwargs={'pk': obj.id},
                                                        current_app='pokerapp')) for obj in data]
        return response.JsonResponse(data={player_name: list_data})


class PlayerStatsView(View):

    def get(self, request, player_name):
        data = HandHistory.objects.all()
        player = Player.objects.get(name=player_name)
        numerator = 0
        lst = []
        for d in data:
            next_data = False
            streets = Street.objects.all().filter(hand_history_id=d.id)
            for street in streets:
                actions = Action.objects.all().filter(street_id=street.id)
                for action in actions:
                    if action.action in {2, 4, 5} and action.player_id == player.id:
                        numerator += 1
                        next_data = True
                        break
                if next_data:
                    break
        denominator = sum(1 for d in data.values('seats__player') if d['seats__player'] == player.id)
        return response.JsonResponse(data={player_name: [numerator, denominator]})


# "Restful" endpoints, full GET/POST/PUT/DELETE apis generated by DRF

class HandHistoryViewSet(viewsets.ModelViewSet):
    queryset = HandHistory.objects.all().order_by('date_played')
    serializer_class = HandHistorySerializer
    permission_classes = [permissions.IsAuthenticated]


class SeatViewSet(viewsets.ModelViewSet):
    queryset = Seat.objects.all().order_by('hand_history__date_played')
    serializer_class = SeatSerializer
    permission_classes = [permissions.IsAuthenticated]


class ActionViewSet(viewsets.ModelViewSet):
    queryset = Action.objects.all().order_by('street__hand_history__date_played', 'street__name', 'sequence_no')
    serializer_class = ActionSerializer
    permission_classes = [permissions.IsAuthenticated]


class StreetViewSet(viewsets.ModelViewSet):
    queryset = Street.objects.all().order_by('hand_history__date_played', 'name')
    serializer_class = StreetSerializer
    permission_classes = [permissions.IsAuthenticated]


class PlayerViewSet(viewsets.ModelViewSet):
    queryset = Player.objects.all().order_by('name')
    serializer_class = PlayerSerializer
    permission_classes = [permissions.IsAuthenticated]
